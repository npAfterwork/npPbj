/**
 * JamApi
 * Api for JamServe
 *
 * OpenAPI spec version: 0.2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse} from '@angular/common/http';
import {Inject, Injectable, Optional} from '@angular/core';

import {Observable} from 'rxjs';
import {Configuration} from '../configuration';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {ID} from '../model/iD';
import {ImageFormatType} from '../model/imageFormatType';

import {BASE_PATH} from '../variables';


@Injectable()
export class ImageService {

  protected basePath = 'http://localhost:4040/jam/{version}';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * Get Image
   * Image Binary [Album, Artist, Artwork, Episode, Folder, Root, Playlist, Podcast, Radio, Series, Track, User]
   * @param format format of the image
   * @param id Object Id
   * @param size size of the image
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public imageControllerImage(format: ImageFormatType, id: ID, size: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public imageControllerImage(format: ImageFormatType, id: ID, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public imageControllerImage(format: ImageFormatType, id: ID, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public imageControllerImage(format: ImageFormatType, id: ID, size: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (format === null || format === undefined) {
      throw new Error('Required parameter format was null or undefined when calling imageControllerImage.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling imageControllerImage.');
    }

    if (size === null || size === undefined) {
      throw new Error('Required parameter size was null or undefined when calling imageControllerImage.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (cookieAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["jam.sid"]) {
      queryParameters = queryParameters.set('jam.sid', this.configuration.apiKeys["jam.sid"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg',
      'image/png',
      'image/tiff',
      'image/webp'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Blob>('get', `${this.basePath}/image/${encodeURIComponent(String(id))}_${encodeURIComponent(String(size))}.${encodeURIComponent(String(format))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Image by Id
   * Image Binary [Album, Artist, Artwork, Episode, Folder, Root, Playlist, Podcast, Radio, Series, Track, User]
   * @param id Object Id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public imageControllerImageid(id: ID, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public imageControllerImageid(id: ID, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public imageControllerImageid(id: ID, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public imageControllerImageid(id: ID, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling imageControllerImageid.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (cookieAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["jam.sid"]) {
      queryParameters = queryParameters.set('jam.sid', this.configuration.apiKeys["jam.sid"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg',
      'image/png',
      'image/tiff',
      'image/webp'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Blob>('get', `${this.basePath}/image/${encodeURIComponent(String(id))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Image by Id and Format
   * Image Binary [Album, Artist, Artwork, Episode, Folder, Root, Playlist, Podcast, Radio, Series, Track, User]
   * @param format format of the image
   * @param id Object Id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public imageControllerImageidFormat(format: ImageFormatType, id: ID, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public imageControllerImageidFormat(format: ImageFormatType, id: ID, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public imageControllerImageidFormat(format: ImageFormatType, id: ID, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public imageControllerImageidFormat(format: ImageFormatType, id: ID, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (format === null || format === undefined) {
      throw new Error('Required parameter format was null or undefined when calling imageControllerImageidFormat.');
    }

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling imageControllerImageidFormat.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (cookieAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["jam.sid"]) {
      queryParameters = queryParameters.set('jam.sid', this.configuration.apiKeys["jam.sid"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg',
      'image/png',
      'image/tiff',
      'image/webp'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Blob>('get', `${this.basePath}/image/${encodeURIComponent(String(id))}.${encodeURIComponent(String(format))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * Get Image by Id and Size
   * Image Binary [Album, Artist, Artwork, Episode, Folder, Root, Playlist, Podcast, Radio, Series, Track, User]
   * @param id Object Id
   * @param size size of the image
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public imageControllerImageidsize(id: ID, size: number, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
  public imageControllerImageidsize(id: ID, size: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public imageControllerImageidsize(id: ID, size: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public imageControllerImageidsize(id: ID, size: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling imageControllerImageidsize.');
    }

    if (size === null || size === undefined) {
      throw new Error('Required parameter size was null or undefined when calling imageControllerImageidsize.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

    let headers = this.defaultHeaders;

    // authentication (bearerAuth) required
    if (this.configuration.accessToken) {
      const accessToken = typeof this.configuration.accessToken === 'function'
        ? this.configuration.accessToken()
        : this.configuration.accessToken;
      headers = headers.set('Authorization', 'Bearer ' + accessToken);
    }
    // authentication (cookieAuth) required
    if (this.configuration.apiKeys && this.configuration.apiKeys["jam.sid"]) {
      queryParameters = queryParameters.set('jam.sid', this.configuration.apiKeys["jam.sid"]);
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'image/jpeg',
      'image/png',
      'image/tiff',
      'image/webp'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<Blob>('get', `${this.basePath}/image/${encodeURIComponent(String(id))}_${encodeURIComponent(String(size))}`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
